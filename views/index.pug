extends layout

block stylesheets
  link(href='/css/lib/jquery-jvectormap-2.0.5.css', rel='stylesheet')
  link(href='/css/map-custom.css', rel='stylesheet')

block content
  .container
    .card
      #map
      .card-footer.text-center
        .row
          .col
            button.btn.btn-secondary#show-hide-colors-button(type='button') Show / Hide
          .col
            button.btn.btn-secondary#shuffle-colors-button(type='button') Shuffle Colors

block javascripts
  script(src='/js/lib/jquery-jvectormap-2.0.5.min.js')
  script(src='/js/lib/jvm/map.js')
  script(src='/js/lib/jquery-jvectormap-us-merc-en.js')

  script.
    let map;
    $(() => {
      const palette = ['#FF8888', '#8888FF', '#88FF88', '#FFFF88'];
      let offset = Math.floor(Math.random() * palette.length);
      let show = false;
      let colors = {};

      const allColors = () => {
        for (let key in map.regions) {
          colors[key] = palette[(offset + map.mapData.paths[key].color) % palette.length];

        }
      };

      const noColors = () => {
        for (let key in map.regions) {
          colors[key] = '#FFFFFF';

        }
      };

      map = new jvm.Map({
        map: 'us_merc_en',
        container: $('#map'),
        series: {
          regions: [{
            attribute: 'fill'
          }]
        },
        // Disable tooltips but keep labels
        onRegionTipShow: function(e, tip, code) {
          e.preventDefault();
        },
        backgroundColor: '#DDDDDD',
        regionsSelectable: true,
        regionStyle: {
          selected: {
            fill: '#AAAAAA'
          }
        },
        onRegionSelected: (e, region, isSelected, selectedRegions) => {
          if (isSelected) {
            for (let key in map.regions) {
              if (selectedRegions.includes(key))
                colors[key] = palette[(offset + map.mapData.paths[key].color) % palette.length];
              else
                colors[key] = '#FFFFFF';
            }
            map.series.regions[0].setValues(colors);

            if (selectedRegions.length == 2)
              map.clearSelectedRegions();

            if (selectedRegions.length > 2)
              noColors();

          }
        }
      });

      $('#shuffle-colors-button').click((e) => {
        e.preventDefault();
        // set offset to some other random number in the range
        offset = (offset + 1 + Math.floor(Math.random() * (palette.length - 2))) % palette.length;

        if (show)
          allColors();

        for (let key in map.regions) {
          if (colors[key] != '#FFFFFF')
            colors[key] = palette[(offset + map.mapData.paths[key].color) % palette.length];
        }

        map.series.regions[0].setValues(colors);

      });

      $('#show-hide-colors-button').click((e) => {
        e.preventDefault();
        if (show) {
          noColors();
          show = false;
          $('#show-hide-colors-button').text('Show Colors');

        }
        else {
          allColors();
          show = true;
          $('#show-hide-colors-button').text('Hide Colors');

        }
        map.series.regions[0].setValues(colors);

      });

      map.updateSize();
      $(window).resize(function() {
        map.updateSize();
      });

      $(document).on('click', function(e) {
        if ($(e.target).is('.jvectormap-container') ||
            $(e.target).is('svg') ||
            $(e.target).is('path.jvectormap-background')) {
          map.clearSelectedRegions();
          noColors();
          map.series.regions[0].setValues(colors);
        }
      });

    });
