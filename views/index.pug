extends layout

block content
  .container
    .card
      #map
      .card-footer.text-center
        .row
          .col
            button.btn.btn-primary#show-hide-colors-button(type='button') Show / Hide
          .col
            button.btn.btn-secondary#shuffle-colors-button(type='button') Shuffle Colors

block javascripts
  script(src='/js/lib/jquery-jvectormap-2.0.5.min.js')
  script(src='/js/lib/jvm/map.js')
  script(src='/js/lib/jquery-jvectormap-us-merc-en.js')

  script.
    let map;
    $(() => {
      const palette = ['#FF8888', '#8888FF', '#88FF88', '#FFFF88'];
      let offset = Math.floor(Math.random() * palette.length);
      let show = false;

      const showColors = () => {
        let colors = {};

        for (let key in map.regions) {
          colors[key] = palette[(offset + map.mapData.paths[key].color) % palette.length];

        }
        return colors;

      };

      const hideColors = () => {
        let colors = {};
        for (let key in map.regions) {
          colors[key] = '#FFFFFF';

        }
        return colors;

      };

      map = new jvm.Map({
        map: 'us_merc_en',
        container: $('#map'),
        series: {
          regions: [{
            attribute: 'fill'
          }]
        },
        labels: {
          regions: {
            render: (code) => code
          }
        },
        backgroundColor: '#DDDDDD',
        regionsSelectable: true,
        regionStyle: {
          selected: {
            fill: '#AAAAAA'
          }
        },
        onRegionSelected: (e, code, selected, regions) => {
          console.log(code, selected, regions);

          if (regions.length < 2) {
            let colors = {};
            for (let key in map.regions) {
              colors[key] = '#FFFFFF';
            }
            map.series.regions[0].setValues(colors);
          }
          else if (regions.length >= 2) {
            let colors = {};
            let unmask = {};
            for (let key in map.regions) {
              if (regions.includes(key)) {
                colors[key] = palette[(offset + map.mapData.paths[key].color) % palette.length];
                unmask[key] = false;
              }
              else
                colors[key] = '#FFFFFF';
            }

            show = true;

            map.setSelectedRegions(unmask);
            map.series.regions[0].setValues(colors);
          }
        }
      });

      $('#shuffle-colors-button').click((e) => {
        e.preventDefault();
        // set offset to some other random number in the range
        offset = (offset + 1 + Math.floor(Math.random() * (palette.length - 2))) % palette.length;

        if (show)
          map.series.regions[0].setValues(showColors());

      });

      $('#show-hide-colors-button').click((e) => {
        e.preventDefault();
        if (show) {
          map.series.regions[0].setValues(hideColors());
          show = false;

        }
        else {
          map.series.regions[0].setValues(showColors());
          show = true;

        }

      });

      map.canvas.setSize(800, 600);
      map.updateSize();

    });
